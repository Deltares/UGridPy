{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Writing meshkernel meshes to ugrid file\n",
    "\n",
    "This is a basic introduction for writing meshkernel meshes to file.\n",
    "\n",
    "First, UGrid is imported"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'0.9.0'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from ugrid import UGrid, UGridMesh2D\n",
    "from ugrid.version import __version__\n",
    "__version__"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Then meshkernel is imported"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "from meshkernel import meshkernel, Mesh1d, Mesh2dFactory, MeshKernel, GeometryList"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Other imports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "from pathlib import Path"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Write a meshkernel mesh2d"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create a triangular mesh2d with meshkernel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh2d_mesh_kernel = Mesh2dFactory.create_rectilinear_mesh(3, 7, origin_x=-0.1, origin_y=-1.5)\n",
    "mk = MeshKernel()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [],
   "source": [
    "polygon_file_path = Path().absolute() / \"data_examples\" / \"test.pol\"\n",
    "polygon_np = np.loadtxt(polygon_file_path, comments=\"*\", skiprows=8, dtype=np.double)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_coordinates = np.array(polygon_np[:, 0], dtype=np.double)\n",
    "y_coordinates = np.array(polygon_np[:, 1], dtype=np.double)\n",
    "polygon = GeometryList(x_coordinates, y_coordinates)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "mk.mesh2d_make_mesh_from_polygon(polygon)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh2d_mesh_kernel = mk.mesh2d_get()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Convert a meshkernel mesh2d to an ugrid mesh2d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh2d_ugrid = UGrid.from_meshkernel_mesh2d_to_ugrid_mesh2d(mesh2d=mesh2d_mesh_kernel, name=\"mesh2d\", is_spherical=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Write UGrid mesh2d  to file"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "with UGrid(\"./Mesh2DMesKernelWrite_net.nc\", \"w+\") as ug:\n",
    "    # 1. Define a new mesh2d\n",
    "    topology_id = ug.mesh2d_define(mesh2d_ugrid)\n",
    "    # 3. Put a new mesh2d\n",
    "    ug.mesh2d_put(topology_id, mesh2d_ugrid)\n",
    "    # 3. Add crs to file\n",
    "    attribute_dict = {\n",
    "        \"name\": \"Unknown projected\",\n",
    "        \"epsg\": np.array([0], dtype=int),\n",
    "        \"grid_mapping_name\": \"Unknown projected\",\n",
    "        \"longitude_of_prime_meridian\": np.array([0.0], dtype=float),\n",
    "        \"semi_major_axis\": np.array([6378137.0], dtype=float),\n",
    "        \"semi_minor_axis\": np.array([6356752.314245], dtype=float),\n",
    "        \"inverse_flattening\": np.array([6356752.314245], dtype=float),\n",
    "        \"EPSG_code\": \"EPSG:0\",\n",
    "        \"value\": \"value is equal to EPSG code\"}\n",
    "    ug.variable_int_with_attributes_define(\"projected_coordinate_system\", attribute_dict)\n",
    "    # 4. Add conventions (global attributes)\n",
    "    conventions = {\n",
    "        \"institution\": \"Deltares\",\n",
    "        \"references\": \"Unknown\",\n",
    "        \"source\": \"Unknown Unknown. Model: Unknown\",\n",
    "        \"history\": \"Created on 2017-11-27T18:05:09+0100, Unknown\",\n",
    "        \"Conventions\": \"CF-1.6 UGRID-1.0/Deltares-0.8\"}\n",
    "    ug.attribute_global_define(conventions)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Write a meshkernel mesh1d"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create a meshkernel mesh1d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create a meshkernel mesh1d\n",
    "node_x = np.array([0.0, 1.0, 2.0, 3.0], dtype=np.double)\n",
    "node_y = np.array([0.0, 0.0, 0.0, 0.0], dtype=np.double)\n",
    "edge_nodes = np.array([0, 1, 1, 2, 2, 3], dtype=np.int32)\n",
    "mesh1d = Mesh1d(node_x=node_x, node_y=node_y, edge_nodes=edge_nodes)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Create data required to instatiate a valid ugrid mesh1d"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [],
   "source": [
    "node_edge_id = np.array([0, 1, 1, 2, 2, 3, 2, 0], dtype=np.int32)\n",
    "node_edge_offset = np.array([0, 1, 1, 2, 2, 3, 2, 0], dtype=np.double)\n",
    "node_name_id = [\"branchname\"]\n",
    "node_name_long = [\"branchnamelong\"]\n",
    "edge_edge_id = np.array([0, 0, 0], dtype=np.int32)\n",
    "edge_edge_offset = np.array([0.5, 1.5, 2.5], dtype=np.double)\n",
    "edge_x = np.array([0.5, 1.5, 2.5], dtype=np.double)\n",
    "edge_y = np.array([0.0, 0.0, 0.0], dtype=np.double)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Converts a meshkernel mesh1d to an ugrid mesh1d, by adding the additional fields, such as network names or branch offsets"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "mesh1d_ugrid = UGrid.from_meshkernel_mesh1d_to_ugrid_mesh1d(\n",
    "    mesh1d=mesh1d,\n",
    "    name=\"mesh1d\",\n",
    "    network_name=\"network1d\",\n",
    "    node_edge_id=node_edge_id,\n",
    "    node_edge_offset=node_edge_offset,\n",
    "    node_name_id=node_name_id,\n",
    "    node_name_long=node_name_long,\n",
    "    edge_edge_id=edge_edge_id,\n",
    "    edge_edge_offset=edge_edge_offset,\n",
    "    edge_x=edge_x,\n",
    "    edge_y=edge_y,\n",
    "    double_fill_value=-999.0,\n",
    "    int_fill_value=999,\n",
    ")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "with UGrid(\"Mesh1DMesKernelWrite_net.nc\", \"w+\") as ug:\n",
    "    # 1. Define a new mesh1d\n",
    "    topology_id = ug.mesh1d_define(mesh1d_ugrid)\n",
    "    # 2. Write a new mesh1d\n",
    "    ug.mesh1d_put(topology_id, mesh1d_ugrid)\n",
    "    # 3. Add crs to file\n",
    "    attribute_dict = {\n",
    "        \"name\": \"Unknown projected\",\n",
    "        \"epsg\": np.array([0], dtype=int),\n",
    "        \"grid_mapping_name\": \"Unknown projected\",\n",
    "        \"longitude_of_prime_meridian\": np.array([0.0], dtype=float),\n",
    "        \"semi_major_axis\": np.array([6378137.0], dtype=float),\n",
    "        \"semi_minor_axis\": np.array([6356752.314245], dtype=float),\n",
    "        \"inverse_flattening\": np.array([6356752.314245], dtype=float),\n",
    "        \"EPSG_code\": \"EPSG:0\",\n",
    "        \"value\": \"value is equal to EPSG code\"}\n",
    "    ug.variable_int_with_attributes_define(\"projected_coordinate_system\", attribute_dict)\n",
    "    # 4. Add conventions (global attributes)\n",
    "    conventions = {\n",
    "        \"institution\": \"Deltares\",\n",
    "        \"references\": \"Unknown\",\n",
    "        \"source\": \"Unknown Unknown. Model: Unknown\",\n",
    "        \"history\": \"Created on 2017-11-27T18:05:09+0100, Unknown\",\n",
    "        \"Conventions\": \"CF-1.6 UGRID-1.0/Deltares-0.8\"}\n",
    "    ug.attribute_global_define(conventions)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
